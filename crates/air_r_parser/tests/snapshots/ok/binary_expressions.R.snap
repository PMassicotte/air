---
source: crates/air_r_parser/tests/spec_test.rs
expression: snapshot
---
## Input

```R
1 ? 2
1 ~ 2
1 <- 2
1 <<- 2
1 := 2
1 -> 2
1 ->> 2
1 = 2
1 | 2
1 & 2
1 || 2
1 && 2
1 < 2
1 <= 2
1 > 2
1 >= 2
1 == 2
1 != 2
1 + 2
1 - 2
1 * 2
1 / 2
1 ** 2
1 ^ 2
1 |> 2
1:2

1 + 2 + 3 + 4

1 + 2^3 + 4

1 + # comment
  2

1 +

  # comment1

  2 # comment2

```


## AST

```
RRoot {
    bom_token: missing (optional),
    expressions: RExpressionList [
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@0..1 "1" [] [],
            },
            operator: WAT@1..3 "?" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@3..5 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@5..7 "1" [Newline("\n")] [],
            },
            operator: TILDE@7..9 "~" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@9..11 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@11..13 "1" [Newline("\n")] [],
            },
            operator: ASSIGN@13..16 "<-" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@16..18 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@18..20 "1" [Newline("\n")] [],
            },
            operator: SUPER_ASSIGN@20..24 "<<-" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@24..26 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@26..28 "1" [Newline("\n")] [],
            },
            operator: WALRUS@28..31 ":=" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@31..33 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@33..35 "1" [Newline("\n")] [],
            },
            operator: ASSIGN_RIGHT@35..38 "->" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@38..40 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@40..42 "1" [Newline("\n")] [],
            },
            operator: SUPER_ASSIGN_RIGHT@42..46 "->>" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@46..48 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@48..50 "1" [Newline("\n")] [],
            },
            operator: EQUAL@50..52 "=" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@52..54 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@54..56 "1" [Newline("\n")] [],
            },
            operator: OR@56..58 "|" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@58..60 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@60..62 "1" [Newline("\n")] [],
            },
            operator: AND@62..64 "&" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@64..66 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@66..68 "1" [Newline("\n")] [],
            },
            operator: OR2@68..71 "||" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@71..73 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@73..75 "1" [Newline("\n")] [],
            },
            operator: AND2@75..78 "&&" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@78..80 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@80..82 "1" [Newline("\n")] [],
            },
            operator: LESS_THAN@82..84 "<" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@84..86 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@86..88 "1" [Newline("\n")] [],
            },
            operator: LESS_THAN_OR_EQUAL_TO@88..91 "<=" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@91..93 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@93..95 "1" [Newline("\n")] [],
            },
            operator: GREATER_THAN@95..97 ">" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@97..99 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@99..101 "1" [Newline("\n")] [],
            },
            operator: GREATER_THAN_OR_EQUAL_TO@101..104 ">=" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@104..106 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@106..108 "1" [Newline("\n")] [],
            },
            operator: EQUAL2@108..111 "==" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@111..113 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@113..115 "1" [Newline("\n")] [],
            },
            operator: NOT_EQUAL@115..118 "!=" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@118..120 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@120..122 "1" [Newline("\n")] [],
            },
            operator: PLUS@122..124 "+" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@124..126 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@126..128 "1" [Newline("\n")] [],
            },
            operator: MINUS@128..130 "-" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@130..132 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@132..134 "1" [Newline("\n")] [],
            },
            operator: MULTIPLY@134..136 "*" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@136..138 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@138..140 "1" [Newline("\n")] [],
            },
            operator: DIVIDE@140..142 "/" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@142..144 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@144..146 "1" [Newline("\n")] [],
            },
            operator: EXPONENTIATE2@146..149 "**" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@149..151 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@151..153 "1" [Newline("\n")] [],
            },
            operator: EXPONENTIATE@153..155 "^" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@155..157 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@157..159 "1" [Newline("\n")] [],
            },
            operator: PIPE@159..162 "|>" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@162..164 "2" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@164..166 "1" [Newline("\n")] [],
            },
            operator: COLON@166..167 ":" [] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@167..168 "2" [] [],
            },
        },
        RBinaryExpression {
            left: RBinaryExpression {
                left: RBinaryExpression {
                    left: RDoubleValue {
                        value_token: R_DOUBLE_LITERAL@168..171 "1" [Newline("\n"), Newline("\n")] [],
                    },
                    operator: PLUS@171..173 "+" [Whitespace(" ")] [],
                    right: RDoubleValue {
                        value_token: R_DOUBLE_LITERAL@173..175 "2" [Whitespace(" ")] [],
                    },
                },
                operator: PLUS@175..177 "+" [Whitespace(" ")] [],
                right: RDoubleValue {
                    value_token: R_DOUBLE_LITERAL@177..179 "3" [Whitespace(" ")] [],
                },
            },
            operator: PLUS@179..181 "+" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@181..183 "4" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RBinaryExpression {
                left: RDoubleValue {
                    value_token: R_DOUBLE_LITERAL@183..186 "1" [Newline("\n"), Newline("\n")] [],
                },
                operator: PLUS@186..188 "+" [Whitespace(" ")] [],
                right: RBinaryExpression {
                    left: RDoubleValue {
                        value_token: R_DOUBLE_LITERAL@188..190 "2" [Whitespace(" ")] [],
                    },
                    operator: EXPONENTIATE@190..191 "^" [] [],
                    right: RDoubleValue {
                        value_token: R_DOUBLE_LITERAL@191..192 "3" [] [],
                    },
                },
            },
            operator: PLUS@192..194 "+" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@194..196 "4" [Whitespace(" ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@196..199 "1" [Newline("\n"), Newline("\n")] [],
            },
            operator: PLUS@199..211 "+" [Whitespace(" ")] [Whitespace(" "), Comments("# comment")],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@211..215 "2" [Newline("\n"), Whitespace("  ")] [],
            },
        },
        RBinaryExpression {
            left: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@215..218 "1" [Newline("\n"), Newline("\n")] [],
            },
            operator: PLUS@218..220 "+" [Whitespace(" ")] [],
            right: RDoubleValue {
                value_token: R_DOUBLE_LITERAL@220..250 "2" [Newline("\n"), Newline("\n"), Whitespace("  "), Comments("# comment1"), Newline("\n"), Newline("\n"), Whitespace("  ")] [Whitespace(" "), Comments("# comment2")],
            },
        },
    ],
    eof_token: EOF@250..251 "" [Newline("\n")] [],
}
```

## CST

```
0: R_ROOT@0..251
  0: (empty)
  1: R_EXPRESSION_LIST@0..250
    0: R_BINARY_EXPRESSION@0..5
      0: R_DOUBLE_VALUE@0..1
        0: R_DOUBLE_LITERAL@0..1 "1" [] []
      1: WAT@1..3 "?" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@3..5
        0: R_DOUBLE_LITERAL@3..5 "2" [Whitespace(" ")] []
    1: R_BINARY_EXPRESSION@5..11
      0: R_DOUBLE_VALUE@5..7
        0: R_DOUBLE_LITERAL@5..7 "1" [Newline("\n")] []
      1: TILDE@7..9 "~" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@9..11
        0: R_DOUBLE_LITERAL@9..11 "2" [Whitespace(" ")] []
    2: R_BINARY_EXPRESSION@11..18
      0: R_DOUBLE_VALUE@11..13
        0: R_DOUBLE_LITERAL@11..13 "1" [Newline("\n")] []
      1: ASSIGN@13..16 "<-" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@16..18
        0: R_DOUBLE_LITERAL@16..18 "2" [Whitespace(" ")] []
    3: R_BINARY_EXPRESSION@18..26
      0: R_DOUBLE_VALUE@18..20
        0: R_DOUBLE_LITERAL@18..20 "1" [Newline("\n")] []
      1: SUPER_ASSIGN@20..24 "<<-" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@24..26
        0: R_DOUBLE_LITERAL@24..26 "2" [Whitespace(" ")] []
    4: R_BINARY_EXPRESSION@26..33
      0: R_DOUBLE_VALUE@26..28
        0: R_DOUBLE_LITERAL@26..28 "1" [Newline("\n")] []
      1: WALRUS@28..31 ":=" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@31..33
        0: R_DOUBLE_LITERAL@31..33 "2" [Whitespace(" ")] []
    5: R_BINARY_EXPRESSION@33..40
      0: R_DOUBLE_VALUE@33..35
        0: R_DOUBLE_LITERAL@33..35 "1" [Newline("\n")] []
      1: ASSIGN_RIGHT@35..38 "->" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@38..40
        0: R_DOUBLE_LITERAL@38..40 "2" [Whitespace(" ")] []
    6: R_BINARY_EXPRESSION@40..48
      0: R_DOUBLE_VALUE@40..42
        0: R_DOUBLE_LITERAL@40..42 "1" [Newline("\n")] []
      1: SUPER_ASSIGN_RIGHT@42..46 "->>" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@46..48
        0: R_DOUBLE_LITERAL@46..48 "2" [Whitespace(" ")] []
    7: R_BINARY_EXPRESSION@48..54
      0: R_DOUBLE_VALUE@48..50
        0: R_DOUBLE_LITERAL@48..50 "1" [Newline("\n")] []
      1: EQUAL@50..52 "=" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@52..54
        0: R_DOUBLE_LITERAL@52..54 "2" [Whitespace(" ")] []
    8: R_BINARY_EXPRESSION@54..60
      0: R_DOUBLE_VALUE@54..56
        0: R_DOUBLE_LITERAL@54..56 "1" [Newline("\n")] []
      1: OR@56..58 "|" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@58..60
        0: R_DOUBLE_LITERAL@58..60 "2" [Whitespace(" ")] []
    9: R_BINARY_EXPRESSION@60..66
      0: R_DOUBLE_VALUE@60..62
        0: R_DOUBLE_LITERAL@60..62 "1" [Newline("\n")] []
      1: AND@62..64 "&" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@64..66
        0: R_DOUBLE_LITERAL@64..66 "2" [Whitespace(" ")] []
    10: R_BINARY_EXPRESSION@66..73
      0: R_DOUBLE_VALUE@66..68
        0: R_DOUBLE_LITERAL@66..68 "1" [Newline("\n")] []
      1: OR2@68..71 "||" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@71..73
        0: R_DOUBLE_LITERAL@71..73 "2" [Whitespace(" ")] []
    11: R_BINARY_EXPRESSION@73..80
      0: R_DOUBLE_VALUE@73..75
        0: R_DOUBLE_LITERAL@73..75 "1" [Newline("\n")] []
      1: AND2@75..78 "&&" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@78..80
        0: R_DOUBLE_LITERAL@78..80 "2" [Whitespace(" ")] []
    12: R_BINARY_EXPRESSION@80..86
      0: R_DOUBLE_VALUE@80..82
        0: R_DOUBLE_LITERAL@80..82 "1" [Newline("\n")] []
      1: LESS_THAN@82..84 "<" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@84..86
        0: R_DOUBLE_LITERAL@84..86 "2" [Whitespace(" ")] []
    13: R_BINARY_EXPRESSION@86..93
      0: R_DOUBLE_VALUE@86..88
        0: R_DOUBLE_LITERAL@86..88 "1" [Newline("\n")] []
      1: LESS_THAN_OR_EQUAL_TO@88..91 "<=" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@91..93
        0: R_DOUBLE_LITERAL@91..93 "2" [Whitespace(" ")] []
    14: R_BINARY_EXPRESSION@93..99
      0: R_DOUBLE_VALUE@93..95
        0: R_DOUBLE_LITERAL@93..95 "1" [Newline("\n")] []
      1: GREATER_THAN@95..97 ">" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@97..99
        0: R_DOUBLE_LITERAL@97..99 "2" [Whitespace(" ")] []
    15: R_BINARY_EXPRESSION@99..106
      0: R_DOUBLE_VALUE@99..101
        0: R_DOUBLE_LITERAL@99..101 "1" [Newline("\n")] []
      1: GREATER_THAN_OR_EQUAL_TO@101..104 ">=" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@104..106
        0: R_DOUBLE_LITERAL@104..106 "2" [Whitespace(" ")] []
    16: R_BINARY_EXPRESSION@106..113
      0: R_DOUBLE_VALUE@106..108
        0: R_DOUBLE_LITERAL@106..108 "1" [Newline("\n")] []
      1: EQUAL2@108..111 "==" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@111..113
        0: R_DOUBLE_LITERAL@111..113 "2" [Whitespace(" ")] []
    17: R_BINARY_EXPRESSION@113..120
      0: R_DOUBLE_VALUE@113..115
        0: R_DOUBLE_LITERAL@113..115 "1" [Newline("\n")] []
      1: NOT_EQUAL@115..118 "!=" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@118..120
        0: R_DOUBLE_LITERAL@118..120 "2" [Whitespace(" ")] []
    18: R_BINARY_EXPRESSION@120..126
      0: R_DOUBLE_VALUE@120..122
        0: R_DOUBLE_LITERAL@120..122 "1" [Newline("\n")] []
      1: PLUS@122..124 "+" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@124..126
        0: R_DOUBLE_LITERAL@124..126 "2" [Whitespace(" ")] []
    19: R_BINARY_EXPRESSION@126..132
      0: R_DOUBLE_VALUE@126..128
        0: R_DOUBLE_LITERAL@126..128 "1" [Newline("\n")] []
      1: MINUS@128..130 "-" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@130..132
        0: R_DOUBLE_LITERAL@130..132 "2" [Whitespace(" ")] []
    20: R_BINARY_EXPRESSION@132..138
      0: R_DOUBLE_VALUE@132..134
        0: R_DOUBLE_LITERAL@132..134 "1" [Newline("\n")] []
      1: MULTIPLY@134..136 "*" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@136..138
        0: R_DOUBLE_LITERAL@136..138 "2" [Whitespace(" ")] []
    21: R_BINARY_EXPRESSION@138..144
      0: R_DOUBLE_VALUE@138..140
        0: R_DOUBLE_LITERAL@138..140 "1" [Newline("\n")] []
      1: DIVIDE@140..142 "/" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@142..144
        0: R_DOUBLE_LITERAL@142..144 "2" [Whitespace(" ")] []
    22: R_BINARY_EXPRESSION@144..151
      0: R_DOUBLE_VALUE@144..146
        0: R_DOUBLE_LITERAL@144..146 "1" [Newline("\n")] []
      1: EXPONENTIATE2@146..149 "**" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@149..151
        0: R_DOUBLE_LITERAL@149..151 "2" [Whitespace(" ")] []
    23: R_BINARY_EXPRESSION@151..157
      0: R_DOUBLE_VALUE@151..153
        0: R_DOUBLE_LITERAL@151..153 "1" [Newline("\n")] []
      1: EXPONENTIATE@153..155 "^" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@155..157
        0: R_DOUBLE_LITERAL@155..157 "2" [Whitespace(" ")] []
    24: R_BINARY_EXPRESSION@157..164
      0: R_DOUBLE_VALUE@157..159
        0: R_DOUBLE_LITERAL@157..159 "1" [Newline("\n")] []
      1: PIPE@159..162 "|>" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@162..164
        0: R_DOUBLE_LITERAL@162..164 "2" [Whitespace(" ")] []
    25: R_BINARY_EXPRESSION@164..168
      0: R_DOUBLE_VALUE@164..166
        0: R_DOUBLE_LITERAL@164..166 "1" [Newline("\n")] []
      1: COLON@166..167 ":" [] []
      2: R_DOUBLE_VALUE@167..168
        0: R_DOUBLE_LITERAL@167..168 "2" [] []
    26: R_BINARY_EXPRESSION@168..183
      0: R_BINARY_EXPRESSION@168..179
        0: R_BINARY_EXPRESSION@168..175
          0: R_DOUBLE_VALUE@168..171
            0: R_DOUBLE_LITERAL@168..171 "1" [Newline("\n"), Newline("\n")] []
          1: PLUS@171..173 "+" [Whitespace(" ")] []
          2: R_DOUBLE_VALUE@173..175
            0: R_DOUBLE_LITERAL@173..175 "2" [Whitespace(" ")] []
        1: PLUS@175..177 "+" [Whitespace(" ")] []
        2: R_DOUBLE_VALUE@177..179
          0: R_DOUBLE_LITERAL@177..179 "3" [Whitespace(" ")] []
      1: PLUS@179..181 "+" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@181..183
        0: R_DOUBLE_LITERAL@181..183 "4" [Whitespace(" ")] []
    27: R_BINARY_EXPRESSION@183..196
      0: R_BINARY_EXPRESSION@183..192
        0: R_DOUBLE_VALUE@183..186
          0: R_DOUBLE_LITERAL@183..186 "1" [Newline("\n"), Newline("\n")] []
        1: PLUS@186..188 "+" [Whitespace(" ")] []
        2: R_BINARY_EXPRESSION@188..192
          0: R_DOUBLE_VALUE@188..190
            0: R_DOUBLE_LITERAL@188..190 "2" [Whitespace(" ")] []
          1: EXPONENTIATE@190..191 "^" [] []
          2: R_DOUBLE_VALUE@191..192
            0: R_DOUBLE_LITERAL@191..192 "3" [] []
      1: PLUS@192..194 "+" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@194..196
        0: R_DOUBLE_LITERAL@194..196 "4" [Whitespace(" ")] []
    28: R_BINARY_EXPRESSION@196..215
      0: R_DOUBLE_VALUE@196..199
        0: R_DOUBLE_LITERAL@196..199 "1" [Newline("\n"), Newline("\n")] []
      1: PLUS@199..211 "+" [Whitespace(" ")] [Whitespace(" "), Comments("# comment")]
      2: R_DOUBLE_VALUE@211..215
        0: R_DOUBLE_LITERAL@211..215 "2" [Newline("\n"), Whitespace("  ")] []
    29: R_BINARY_EXPRESSION@215..250
      0: R_DOUBLE_VALUE@215..218
        0: R_DOUBLE_LITERAL@215..218 "1" [Newline("\n"), Newline("\n")] []
      1: PLUS@218..220 "+" [Whitespace(" ")] []
      2: R_DOUBLE_VALUE@220..250
        0: R_DOUBLE_LITERAL@220..250 "2" [Newline("\n"), Newline("\n"), Whitespace("  "), Comments("# comment1"), Newline("\n"), Newline("\n"), Whitespace("  ")] [Whitespace(" "), Comments("# comment2")]
  2: EOF@250..251 "" [Newline("\n")] []

```
